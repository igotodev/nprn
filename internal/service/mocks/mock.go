// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	salemodel "nprn/internal/entity/sale/salemodel"
	usermodel "nprn/internal/entity/user/usermodel"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSaleStorage is a mock of SaleStorage interface.
type MockSaleStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSaleStorageMockRecorder
}

// MockSaleStorageMockRecorder is the mock recorder for MockSaleStorage.
type MockSaleStorageMockRecorder struct {
	mock *MockSaleStorage
}

// NewMockSaleStorage creates a new mock instance.
func NewMockSaleStorage(ctrl *gomock.Controller) *MockSaleStorage {
	mock := &MockSaleStorage{ctrl: ctrl}
	mock.recorder = &MockSaleStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaleStorage) EXPECT() *MockSaleStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSaleStorage) Create(ctx context.Context, sale salemodel.Sale) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sale)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSaleStorageMockRecorder) Create(ctx, sale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSaleStorage)(nil).Create), ctx, sale)
}

// Delete mocks base method.
func (m *MockSaleStorage) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSaleStorageMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSaleStorage)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockSaleStorage) GetAll(ctx context.Context) ([]salemodel.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]salemodel.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSaleStorageMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSaleStorage)(nil).GetAll), ctx)
}

// GetOne mocks base method.
func (m *MockSaleStorage) GetOne(ctx context.Context, id string) (salemodel.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, id)
	ret0, _ := ret[0].(salemodel.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockSaleStorageMockRecorder) GetOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockSaleStorage)(nil).GetOne), ctx, id)
}

// Update mocks base method.
func (m *MockSaleStorage) Update(ctx context.Context, sale salemodel.Sale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSaleStorageMockRecorder) Update(ctx, sale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSaleStorage)(nil).Update), ctx, sale)
}

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserStorage) Create(ctx context.Context, user usermodel.UserInternal) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserStorageMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserStorage)(nil).Create), ctx, user)
}

// GetOne mocks base method.
func (m *MockUserStorage) GetOne(ctx context.Context, username, password string) (usermodel.UserTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, username, password)
	ret0, _ := ret[0].(usermodel.UserTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockUserStorageMockRecorder) GetOne(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockUserStorage)(nil).GetOne), ctx, username, password)
}
